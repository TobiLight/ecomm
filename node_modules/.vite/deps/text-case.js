import "./chunk-ZC22LKFR.js";

// node_modules/.pnpm/text-lower-case@1.0.4/node_modules/text-lower-case/dist.es2015/index.js
var SUPPORTED_LOCALE = {
  tr: {
    regexp: /\u0130|\u0049|\u0049\u0307/g,
    map: {
      İ: "i",
      I: "ı",
      İ: "i"
    }
  },
  az: {
    regexp: /\u0130/g,
    map: {
      İ: "i",
      I: "ı",
      İ: "i"
    }
  },
  lt: {
    regexp: /\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,
    map: {
      I: "i̇",
      J: "j̇",
      Į: "į̇",
      Ì: "i̇̀",
      Í: "i̇́",
      Ĩ: "i̇̃"
    }
  }
};
function localeLowerCase(str, locale) {
  var lang = SUPPORTED_LOCALE[locale.toLowerCase()];
  if (lang)
    return lowerCase(str.replace(lang.regexp, function(m) {
      return lang.map[m];
    }));
  return lowerCase(str);
}
function lowerCase(str) {
  return str.toLowerCase();
}

// node_modules/.pnpm/text-no-case@1.0.2/node_modules/text-no-case/dist.es2015/index.js
var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
function noCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
  var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
  var start = 0;
  var end = result.length;
  while (result.charAt(start) === "\0")
    start++;
  while (result.charAt(end - 1) === "\0")
    end--;
  return result.slice(start, end).split("\0").map(transform).join(delimiter);
}
function replace(input, re, value) {
  if (re instanceof RegExp)
    return input.replace(re, value);
  return re.reduce(function(input2, re2) {
    return input2.replace(re2, value);
  }, input);
}

// node_modules/.pnpm/text-pascal-case@1.0.3/node_modules/text-pascal-case/dist.es2015/index.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function pascalCaseTransform(input, index) {
  var firstChar = input.charAt(0);
  var lowerChars = input.substr(1).toLowerCase();
  if (index > 0 && firstChar >= "0" && firstChar <= "9") {
    return "_" + firstChar + lowerChars;
  }
  return "" + firstChar.toUpperCase() + lowerChars;
}
function pascalCaseTransformMerge(input) {
  return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
}
function pascalCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input, __assign({ delimiter: "", transform: pascalCaseTransform }, options));
}

// node_modules/.pnpm/text-camel-case@1.0.2/node_modules/text-camel-case/dist.es2015/index.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function camelCaseTransform(input, index) {
  if (index === 0)
    return input.toLowerCase();
  return pascalCaseTransform(input, index);
}
function camelCaseTransformMerge(input, index) {
  if (index === 0)
    return input.toLowerCase();
  return pascalCaseTransformMerge(input);
}
function camelCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return pascalCase(input, __assign2({ transform: camelCaseTransform }, options));
}

// node_modules/.pnpm/text-upper-case-first@1.0.2/node_modules/text-upper-case-first/dist.es2015/index.js
function upperCaseFirst(input) {
  return input.charAt(0).toUpperCase() + input.substr(1);
}

// node_modules/.pnpm/text-capital-case@1.0.2/node_modules/text-capital-case/dist.es2015/index.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function capitalCaseTransform(input) {
  return upperCaseFirst(input.toLowerCase());
}
function capitalCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input, __assign3({ delimiter: " ", transform: capitalCaseTransform }, options));
}

// node_modules/.pnpm/text-upper-case@1.0.2/node_modules/text-upper-case/dist.es2015/index.js
var SUPPORTED_LOCALE2 = {
  tr: {
    regexp: /[\u0069]/g,
    map: {
      i: "İ"
    }
  },
  az: {
    regexp: /[\u0069]/g,
    map: {
      i: "İ"
    }
  },
  lt: {
    regexp: /[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,
    map: {
      i̇: "I",
      j̇: "J",
      į̇: "Į",
      i̇̀: "Ì",
      i̇́: "Í",
      i̇̃: "Ĩ"
    }
  }
};
function localeUpperCase(str, locale) {
  var lang = SUPPORTED_LOCALE2[locale.toLowerCase()];
  if (lang)
    return upperCase(str.replace(lang.regexp, function(m) {
      return lang.map[m];
    }));
  return upperCase(str);
}
function upperCase(str) {
  return str.toUpperCase();
}

// node_modules/.pnpm/text-constant-case@1.0.2/node_modules/text-constant-case/dist.es2015/index.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function constantCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input, __assign4({ delimiter: "_", transform: upperCase }, options));
}

// node_modules/.pnpm/text-dot-case@1.0.2/node_modules/text-dot-case/dist.es2015/index.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
function dotCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input, __assign5({ delimiter: "." }, options));
}

// node_modules/.pnpm/text-header-case@1.0.2/node_modules/text-header-case/dist.es2015/index.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
function headerCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return capitalCase(input, __assign6({ delimiter: "-" }, options));
}

// node_modules/.pnpm/text-is-lower-case@1.0.2/node_modules/text-is-lower-case/dist.es2015/index.js
function isLowerCase(input) {
  return input.toLowerCase() === input && input.toUpperCase() !== input;
}

// node_modules/.pnpm/text-is-upper-case@1.0.2/node_modules/text-is-upper-case/dist.es2015/index.js
function isUpperCase(input) {
  return input.toUpperCase() === input && input.toLowerCase() !== input;
}

// node_modules/.pnpm/text-lower-case-first@1.0.2/node_modules/text-lower-case-first/dist.es2015/index.js
function lowerCaseFirst(input) {
  return input.charAt(0).toLowerCase() + input.substr(1);
}

// node_modules/.pnpm/text-param-case@1.0.2/node_modules/text-param-case/dist.es2015/index.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
function paramCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return dotCase(input, __assign7({ delimiter: "-" }, options));
}

// node_modules/.pnpm/text-path-case@1.0.2/node_modules/text-path-case/dist.es2015/index.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
function pathCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return dotCase(input, __assign8({ delimiter: "/" }, options));
}

// node_modules/.pnpm/text-sentence-case@1.0.2/node_modules/text-sentence-case/dist.es2015/index.js
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
function sentenceCaseTransform(input, index) {
  var result = input.toLowerCase();
  if (index === 0)
    return upperCaseFirst(result);
  return result;
}
function sentenceCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input, __assign9({ delimiter: " ", transform: sentenceCaseTransform }, options));
}

// node_modules/.pnpm/text-snake-case@1.0.2/node_modules/text-snake-case/dist.es2015/index.js
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
function snakeCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return dotCase(input, __assign10({ delimiter: "_" }, options));
}

// node_modules/.pnpm/text-swap-case@1.0.2/node_modules/text-swap-case/dist.es2015/index.js
function swapCase(input) {
  var result = "";
  for (var i = 0; i < input.length; i++) {
    var lower = input[i].toLowerCase();
    result += input[i] === lower ? input[i].toUpperCase() : lower;
  }
  return result;
}

// node_modules/.pnpm/text-title-case@1.0.2/node_modules/text-title-case/dist.es2015/index.js
var SMALL_WORDS = /\b(?:an?d?|a[st]|because|but|by|en|for|i[fn]|neither|nor|o[fnr]|only|over|per|so|some|tha[tn]|the|to|up|upon|vs?\.?|versus|via|when|with|without|yet)\b/i;
var TOKENS = /[^\s:–—-]+|./g;
var WHITESPACE = /\s/;
var IS_MANUAL_CASE = /.(?=[A-Z]|\..)/;
var ALPHANUMERIC_PATTERN = /[A-Za-z0-9\u00C0-\u00FF]/;
function titleCase(input) {
  var result = "";
  var m;
  while ((m = TOKENS.exec(input)) !== null) {
    var token = m[0], index = m.index;
    if (
      // Ignore already capitalized words.
      !IS_MANUAL_CASE.test(token) && // Ignore small words except at beginning or end.
      (!SMALL_WORDS.test(token) || index === 0 || index + token.length === input.length) && // Ignore URLs.
      (input.charAt(index + token.length) !== ":" || WHITESPACE.test(input.charAt(index + token.length + 1)))
    ) {
      result += token.replace(ALPHANUMERIC_PATTERN, function(m2) {
        return m2.toUpperCase();
      });
      continue;
    }
    result += token;
  }
  return result;
}
export {
  camelCase,
  camelCaseTransform,
  camelCaseTransformMerge,
  capitalCase,
  capitalCaseTransform,
  constantCase,
  dotCase,
  headerCase,
  isLowerCase,
  isUpperCase,
  localeLowerCase,
  localeUpperCase,
  lowerCase,
  lowerCaseFirst,
  noCase,
  paramCase,
  pascalCase,
  pascalCaseTransform,
  pascalCaseTransformMerge,
  pathCase,
  sentenceCase,
  sentenceCaseTransform,
  snakeCase,
  swapCase,
  titleCase,
  upperCase,
  upperCaseFirst
};
//# sourceMappingURL=text-case.js.map
